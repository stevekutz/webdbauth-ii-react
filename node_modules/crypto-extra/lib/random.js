'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.randomString = randomString;
exports.randomNumber = randomNumber;

var _crypto = require('crypto');

function randomString() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var charset = arguments[1];

  size = typeof size !== 'number' ? size = parseInt(size, 10) : size;
  if (size <= 0) throw new Error('random size must be above 0!');

  var bytes = (0, _crypto.randomBytes)(size);
  var chars = charset || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  if (typeof chars !== 'string') {
    throw new TypeError('charset must be a string, got ' + (typeof chars === 'undefined' ? 'undefined' : _typeof(chars)));
  }

  var value = '';
  for (var i = 0, len = bytes.length; i < len; i++) {
    value += chars[bytes.readUInt8(i) % chars.length];
  }

  return value;
}

function randomNumber() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var integerLimit = Number.MAX_SAFE_INTEGER;

  options.min = options.min || 0;
  options.max = options.max || integerLimit;

  if (typeof options.min !== 'number' || typeof options.max !== 'number') {
    throw new TypeError('min and max have to be numbers');
  }

  if (options.min < 0 || options.min > integerLimit - 1 || options.max < 1 || options.max > integerLimit) {
    throw new Error('limits must be between 0 and ' + integerLimit);
  }

  var hex = (0, _crypto.randomBytes)(16).toString('hex');
  var integer = parseInt(hex, 16);
  var random = integer / 0xffffffffffffffffffffffffffffffff;

  return Math.floor(random * (options.max - options.min + 1) + options.min);
}